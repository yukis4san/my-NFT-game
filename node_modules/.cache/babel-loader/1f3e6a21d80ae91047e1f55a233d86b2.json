{"ast":null,"code":"var _jsxFileName = \"/Users/yukis4san/NFT-game/src/Components/Arena/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../../Components/LoadingIndicator'; // フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Arena = _ref => {\n  _s();\n\n  let {\n    characterNFT,\n    setCharacterNFT\n  } = _ref;\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null); // ボスのメタデータを保存する状態変数を初期化します。\n\n  const [boss, setBoss] = useState(null); // 攻撃の状態を保存する変数を初期化します。\n\n  const [attackState, setAttackState] = useState(''); // ボスを攻撃する関数を設定します。\n\n  const runAttackAction = async () => {\n    try {\n      // コントラクトが呼び出されたことを確認します。\n      if (gameContract) {\n        // attackState の状態を attacking に設定します。\n        setAttackState('attacking');\n        console.log('Attacking boss...'); // NFT キャラクターがボスを攻撃します。\n\n        const attackTxn = await gameContract.attackBoss(); // トランザクションがマイニングされるまで待ちます。\n\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn); // attackState の状態を hit に設定します。\n\n        setAttackState('hit'); // 攻撃ダメージの表示をtrueに設定し（表示）、5秒後にfalseに設定する（非表示）\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  }; // ページがロードされると下記が実行されます。\n\n\n  useEffect(() => {\n    // ボスのデータをコントラクトから読み込む関数を設定します。\n    const fetchBoss = async () => {\n      //ボスのメタデータをコントラクトをから呼び出します。\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn); // ボスの状態を設定します。\n\n      setBoss(transformCharacterData(bossTxn));\n    }; // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n\n\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`); // NFT キャラクターとボスのHPを更新します。\n\n      setBoss(prevState => {\n        return { ...prevState,\n          hp: bossHp\n        };\n      });\n      setCharacterNFT(prevState => {\n        return { ...prevState,\n          hp: playerHp\n        };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss(); // リスナーの設定：ボスが攻撃された通知を受け取ります。\n\n      gameContract.on('AttackComplete', onAttackComplete);\n    } // コンポーネントがマウントされたら、リスナーを停止する。\n\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    };\n  }, [gameContract]); // ページがロードされると下記が実行されます。\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"arena-container\",\n    children: [boss && characterNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toast\",\n      className: showToast ? 'show' : '',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"desc\",\n        children: `💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }, this), boss && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boss-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `boss-content  ${attackState}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDD25 \", boss.name, \" \\uD83D\\uDD25\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: boss.imageURI,\n            alt: `Boss ${boss.name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"health-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n              value: boss.hp,\n              max: boss.maxHp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${boss.hp} / ${boss.maxHp} HP`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attack-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button\",\n          onClick: runAttackAction,\n          children: `💥 Attack ${boss.name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }, this), attackState === 'attacking' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Attacking \\u2694\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 3\n    }, this), characterNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Character\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: characterNFT.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: characterNFT.imageURI,\n              alt: `Character ${characterNFT.name}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"health-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n                value: characterNFT.hp,\n                max: characterNFT.maxHp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${characterNFT.hp} / ${characterNFT.maxHp} HP`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: `⚔️ Attack Damage: ${characterNFT.attackDamage}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 2\n  }, this);\n};\n\n_s(Arena, \"Oim9I6of/MTlSXkGOmcjUI0jKUg=\");\n\n_c = Arena;\nexport default Arena;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arena\");","map":{"version":3,"sources":["/Users/yukis4san/NFT-game/src/Components/Arena/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","LoadingIndicator","Arena","characterNFT","setCharacterNFT","gameContract","setGameContract","boss","setBoss","attackState","setAttackState","runAttackAction","console","log","attackTxn","attackBoss","wait","setShowToast","setTimeout","error","fetchBoss","bossTxn","getBigBoss","onAttackComplete","newBossHp","newPlayerHp","bossHp","toNumber","playerHp","prevState","hp","on","off","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","showToast","name","attackDamage","imageURI","maxHp"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../../Components/LoadingIndicator';\n\n// フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null);\n\n  // ボスのメタデータを保存する状態変数を初期化します。\n  const [boss, setBoss] = useState(null);\n\n  // 攻撃の状態を保存する変数を初期化します。\n  const [attackState, setAttackState] = useState('');\n\n  // ボスを攻撃する関数を設定します。\n  const runAttackAction = async () => {\n\ttry {\n\t\t// コントラクトが呼び出されたことを確認します。\n\t\tif (gameContract) {\n\t\t// attackState の状態を attacking に設定します。\n\t\tsetAttackState('attacking');\n\t\tconsole.log('Attacking boss...');\n\n\t\t// NFT キャラクターがボスを攻撃します。\n\t\tconst attackTxn = await gameContract.attackBoss();\n\n\t\t// トランザクションがマイニングされるまで待ちます。\n\t\tawait attackTxn.wait();\n\t\tconsole.log('attackTxn:', attackTxn);\n\n\t\t// attackState の状態を hit に設定します。\n\t\tsetAttackState('hit');\n\n     \t // 攻撃ダメージの表示をtrueに設定し（表示）、5秒後にfalseに設定する（非表示）\n      \tsetShowToast(true);\n      \tsetTimeout(() => {\n        \tsetShowToast(false);\n      \t}, 5000);\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('Error attacking boss:', error);\n\t\tsetAttackState('');\n\t}\n  };\n\n// ページがロードされると下記が実行されます。\nuseEffect(() => {\n\t// ボスのデータをコントラクトから読み込む関数を設定します。\n\tconst fetchBoss = async () => {\n\t\t//ボスのメタデータをコントラクトをから呼び出します。\n\t\tconst bossTxn = await gameContract.getBigBoss();\n\t\tconsole.log('Boss:', bossTxn);\n\t\t// ボスの状態を設定します。\n\t\tsetBoss(transformCharacterData(bossTxn));\n\t};\n\n\t// AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n\tconst onAttackComplete = (newBossHp, newPlayerHp) => {\n\t\tconst bossHp = newBossHp.toNumber();\n\t\tconst playerHp = newPlayerHp.toNumber();\n\t\tconsole.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n\t\t// NFT キャラクターとボスのHPを更新します。\n\t\tsetBoss((prevState) => {\n\t\t\treturn { ...prevState, hp: bossHp };\n\t\t});\n\t\tsetCharacterNFT((prevState) => {\n\t\t\treturn { ...prevState, hp: playerHp };\n\t\t});\n\t};\n\n\tif (gameContract) {\n\t\tfetchBoss();\n\t\t// リスナーの設定：ボスが攻撃された通知を受け取ります。\n\t\tgameContract.on('AttackComplete', onAttackComplete);\n\t}\n\n\t// コンポーネントがマウントされたら、リスナーを停止する。\n\treturn () => {\n\t\tif (gameContract) {\n\t\t\tgameContract.off('AttackComplete', onAttackComplete);\n\t\t}\n\t}\n  }, [gameContract]);\n\n  // ページがロードされると下記が実行されます。\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  return (\n\t<div className=\"arena-container\">\n\t  {/* 攻撃ダメージの通知を追加します */}\n\t  {boss && characterNFT && (\n\t\t<div id=\"toast\" className={showToast ? 'show' : ''}>\n\t\t  <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n\t\t</div>\n\t  )}\n\t  {/* ボスをレンダリングします */}\n\t  {boss && (\n\t\t<div className=\"boss-container\">\n\t\t  <div className={`boss-content  ${attackState}`}>\n\t\t\t<h2>🔥 {boss.name} 🔥</h2>\n\t\t\t<div className=\"image-content\">\n\t\t\t  <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n\t\t\t  <div className=\"health-bar\">\n\t\t\t\t<progress value={boss.hp} max={boss.maxHp} />\n\t\t\t\t<p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n\t\t  <div className=\"attack-container\">\n\t\t\t<button className=\"cta-button\" onClick={runAttackAction}>\n\t\t\t  {`💥 Attack ${boss.name}`}\n\t\t\t</button>\n\t\t  </div>\n\t\t  {/* Attack ボタンの下にローディングマークを追加します*/}\n\t\t  {attackState === 'attacking' && (\n\t\t\t<div className=\"loading-indicator\">\n\t\t\t  <LoadingIndicator />\n\t\t\t  <p>Attacking ⚔️</p>\n\t\t\t</div>\n\t\t  )}\n\t\t</div>\n\t  )}\n\t  {/* NFT キャラクター をレンダリングします*/}\n\t  {characterNFT && (\n\t\t<div className=\"players-container\">\n\t\t  <div className=\"player-container\">\n\t\t\t<h2>Your Character</h2>\n\t\t\t<div className=\"player\">\n\t\t\t  <div className=\"image-content\">\n\t\t\t\t<h2>{characterNFT.name}</h2>\n\t\t\t\t<img\n\t\t\t\t  src={characterNFT.imageURI}\n\t\t\t\t  alt={`Character ${characterNFT.name}`}\n\t\t\t\t/>\n\t\t\t\t<div className=\"health-bar\">\n\t\t\t\t  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n\t\t\t\t  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t  <div className=\"stats\">\n\t\t\t\t<h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n\t\t  {/* <div className=\"active-players\">\n\t\t\t<h2>Active Players</h2>\n\t\t\t<div className=\"players-list\">{renderActivePlayersList()}</div>\n\t\t  </div> */}\n\t\t</div>\n\t  )}\n\t</div>\n  );\n};\nexport default Arena;\n"]},"metadata":{},"sourceType":"module"}