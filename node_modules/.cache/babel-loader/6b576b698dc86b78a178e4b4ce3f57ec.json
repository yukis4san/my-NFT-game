{"ast":null,"code":"var _jsxFileName = \"/Users/yukis4san/NFT-game/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json'; // SelectCharacter コンポーネントを定義しています。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n    }\n  }; // ページがロードされた瞬間に下記を実行します。\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // ページがロードされた瞬間に下記を実行します。\n\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint'); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッドを追加します。\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナに移動するための状態に設定します。\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters(); // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 3\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 3\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/Users/yukis4san/NFT-game/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","on","off","renderCharacters","character","index","name","imageURI","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n\n// SelectCharacter コンポーネントを定義しています。\nconst SelectCharacter = ({ setCharacterNFT }) => {\n\tconst [characters, setCharacters] = useState([]);\n\tconst [gameContract, setGameContract] = useState(null);\n\n\tconst mintCharacterNFTAction = (characterId) => async () => {\n\t\ttry {\n\t\t\tif (gameContract) {\n\t\t\tconsole.log('Minting character in progress...');\n\t\t\tconst mintTxn = await gameContract.mintCharacterNFT(characterId);\n\t\t\tawait mintTxn.wait();\n\t\t\tconsole.log('mintTxn:', mintTxn);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.warn('MintCharacterAction Error:', error);\n\t\t}\n\t};\n\n\t// ページがロードされた瞬間に下記を実行します。\n\tuseEffect(() => {\n\tconst { ethereum } = window;\n\n\tif (ethereum) {\n\t  const provider = new ethers.providers.Web3Provider(ethereum);\n\t  const signer = provider.getSigner();\n\t  const gameContract = new ethers.Contract(\n\t\tCONTRACT_ADDRESS,\n\t\tmyEpicGame.abi,\n\t\tsigner\n\t  );\n\t  // gameContract の状態を更新します。\n\t  setGameContract(gameContract);\n\t} else {\n\t  console.log('Ethereum object not found');\n\t}\n  \t}, []);\n\n\t// ページがロードされた瞬間に下記を実行します。\n\tuseEffect(() => {\n\t\t// NFT キャラクターのデータをスマートコントラクトから取得します。\n\t\tconst getCharacters = async () => {\n\t\t  try {\n\t\t\tconsole.log('Getting contract characters to mint');\n\n\t\t\t// ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\t\t\tconst charactersTxn = await gameContract.getAllDefaultCharacters();\n\n\t\t\tconsole.log('charactersTxn:', charactersTxn);\n\n\t\t\t// すべてのNFTキャラクターのデータを変換します。\n\t\t\tconst characters = charactersTxn.map((characterData) =>\n\t\t\t  transformCharacterData(characterData)\n\t\t\t);\n\n\t\t\t// ミント可能なすべてのNFTキャラクターの状態を設定します。\n\t\t\tsetCharacters(characters);\n\t\t  } catch (error) {\n\t\t\tconsole.error('Something went wrong fetching characters:', error);\n\t\t  }\n\t\t};\n\t\t// イベントを受信したときに起動するコールバックメソッドを追加します。\n\t\tconst onCharacterMint = async (sender, tokenId, characterIndex) => {\n\t\t  console.log(\n\t\t\t`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n\t\t  );\n\t\t  // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナに移動するための状態に設定します。\n\t\t  if (gameContract) {\n\t\t\tconst characterNFT = await gameContract.checkIfUserHasNFT();\n\t\t\tconsole.log('CharacterNFT: ', characterNFT);\n\t\t\tsetCharacterNFT(transformCharacterData(characterNFT));\n\t\t  }\n\t\t};\n\t\tif (gameContract) {\n\t\t  getCharacters();\n\t\t  // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n\t\t  gameContract.on('CharacterNFTMinted', onCharacterMint);\n\t\t}\n\t\treturn () => {\n\t\t  \t// コンポーネントがマウントされたら、リスナーを停止する。\n\t\t  if (gameContract) {\n\t\t\tgameContract.off('CharacterNFTMinted', onCharacterMint);\n\t\t  }\n\t\t};\n\t  }, [gameContract]);\n\n\t// NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\tconst renderCharacters = () =>\n\tcharacters.map((character, index) => (\n\t\t<div className=\"character-item\" key={character.name}>\n\t\t<div className=\"name-container\">\n\t\t\t<p>{character.name}</p>\n\t\t</div>\n\t\t<img src={character.imageURI} alt={character.name} />\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\tclassName=\"character-mint-button\"\n\t\t\tonClick={mintCharacterNFTAction(index)}\n\t\t>{`Mint ${character.name}`}</button>\n\t\t</div>\n\t));\n\n\n\treturn (\n\t\t<div className=\"select-character-container\">\n\t\t  <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n\t\t  {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\n\t\t  {characters.length > 0 && (\n\t\t\t<div className=\"character-grid\">{renderCharacters()}</div>\n\t\t  )}\n\t\t</div>\n\t  );\n\n  };\n\n  export default SelectCharacter;\n"]},"metadata":{},"sourceType":"module"}