{"ast":null,"code":"var _jsxFileName = \"/Users/yukis4san/NFT-game/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json'; // SelectCharacter コンポーネントを定義しています。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // ページがロードされた瞬間に下記を実行します。\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // ページがロードされた瞬間に下記を実行します。\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint'); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    }; // gameContractの準備ができたら、NFT キャラクターを読み込みます。\n\n\n    if (gameContract) {\n      getCharacters();\n    }\n  }, [gameContract]); // Render Methods\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/Users/yukis4san/NFT-game/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","error","renderCharacters","character","index","name","imageURI","mintCharacterNFTAction","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n\n// SelectCharacter コンポーネントを定義しています。\nconst SelectCharacter = ({ setCharacterNFT }) => {\n\tconst [characters, setCharacters] = useState([]);\n\tconst [gameContract, setGameContract] = useState(null);\n\n\t// ページがロードされた瞬間に下記を実行します。\n\tuseEffect(() => {\n\tconst { ethereum } = window;\n\n\tif (ethereum) {\n\t  const provider = new ethers.providers.Web3Provider(ethereum);\n\t  const signer = provider.getSigner();\n\t  const gameContract = new ethers.Contract(\n\t\tCONTRACT_ADDRESS,\n\t\tmyEpicGame.abi,\n\t\tsigner\n\t  );\n\t  // gameContract の状態を更新します。\n\t  setGameContract(gameContract);\n\t} else {\n\t  console.log('Ethereum object not found');\n\t}\n  \t}, []);\n\n\t// ページがロードされた瞬間に下記を実行します。\n\tuseEffect(() => {\n\tconst getCharacters = async () => {\n\t\ttry {\n\t\t\tconsole.log('Getting contract characters to mint');\n\t\t\t// ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\t\t\tconst charactersTxn = await gameContract.getAllDefaultCharacters();\n\t\t\tconsole.log('charactersTxn:', charactersTxn);\n\t\t\t// すべてのNFTキャラクターのデータを変換します。\n\t\t\tconst characters = charactersTxn.map((characterData) =>\n\t\t\ttransformCharacterData(characterData)\n\t\t\t);\n\t\t\t// ミント可能なすべてのNFTキャラクターの状態を設定します。\n\t\t\tsetCharacters(characters);\n\t\t} catch (error) {\n\t\t\tconsole.error('Something went wrong fetching characters:', error);\n\t\t}\n\t};\n\t// gameContractの準備ができたら、NFT キャラクターを読み込みます。\n\tif (gameContract) {\n\t\tgetCharacters();\n\t}\n\t}, [gameContract]);\n\n\t// Render Methods\n\tconst renderCharacters = () =>\n\tcharacters.map((character, index) => (\n\t\t<div className=\"character-item\" key={character.name}>\n\t\t<div className=\"name-container\">\n\t\t\t<p>{character.name}</p>\n\t\t</div>\n\t\t<img src={character.imageURI} alt={character.name} />\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\tclassName=\"character-mint-button\"\n\t\t\tonClick={mintCharacterNFTAction(index)}\n\t\t>{`Mint ${character.name}`}</button>\n\t\t</div>\n\t));\n\n\n\treturn (\n\t\t<div className=\"select-character-container\">\n\t\t  <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n\t\t  {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\n\t\t  {characters.length > 0 && (\n\t\t\t<div className=\"character-grid\">{renderCharacters()}</div>\n\t\t  )}\n\t\t</div>\n\t  );\n\n  };\n\n  export default SelectCharacter;\n"]},"metadata":{},"sourceType":"module"}