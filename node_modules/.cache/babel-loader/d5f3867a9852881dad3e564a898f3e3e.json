{"ast":null,"code":"var _jsxFileName = \"/Users/yukis4san/NFT-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport myEpicGame from './utils/MyEpicGame.json';\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants'; // `SelectCharacter` に入っているファイルをインポートします。\n\nimport SelectCharacter from './Components/SelectCharacter'; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーがメタマクスを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/TgWatRU.gif\",\n          alt: \"Detective Pickachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('MetaMask を ダウンロードしてください!');\n        return;\n      }\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されてえいるか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n    }; // 接続されたウォレットがある場合のみ、下記を実行します。\n\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"XD8fAWLZJHt3bsbpClNLTnpTepQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yukis4san/NFT-game/src/App.js"],"names":["myEpicGame","React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","SelectCharacter","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","setGameContract","twitterLogo"],"mappings":"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","sourcesContent":["import myEpicGame from './utils/MyEpicGame.json';\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\n\n// `SelectCharacter` に入っているファイルをインポートします。\nimport SelectCharacter from './Components/SelectCharacter';\n\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  // characterNFT と setCharacterNFT を初期化します。\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Rinkeby Test Network に接続してください!\")\n      } else {\n        console.log(\"Rinkeby に接続されています.\")\n      }\n    } catch(error) {\n      console.log(error)\n    }\n  }\n\n  // ユーザーがメタマクスを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n        // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        // もしアカウントが一つでも存在したら、以下を実行。\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          // currentAccountにユーザーのアカウントアドレスを格納\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // レンダリングメソッド\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n              src=\"https://i.imgur.com/TgWatRU.gif\"\n              alt=\"Detective Pickachu\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet to Get Started\n          </button>\n        </div>\n      );\n    // シナリオ2.\n    // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  // connectWallet メソッドを実装します。\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert('MetaMask を ダウンロードしてください!');\n        return;\n      }\n      checkIfWalletIsConnected();\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      // ウォレットアドレスを currentAccount に紐付けます。\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n      // ユーザーが Rinkeby に接続されてえいるか確認します。\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n    };\n\n    // 接続されたウォレットがある場合のみ、下記を実行します。\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n          {/* renderContent メソッドを呼び出します。*/}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}